from collections import deque

def canVisitAllRooms(rooms):
    visited = [False] * len(rooms)

    # v 에 연결되어있는 모든 vertex 방문하는 로직
    # def dfs(v):
    #     visited[v] = True
    #     for next_v in rooms[v]:
    #         if visited[next_v] == False:
    #             dfs(next_v)

    # dfs(0)

    def bfs(v):
        queue = deque()
        queue.append(v)
        visited[v] = True
        while queue:
            cur_v = queue.popleft()
            for next_v in rooms[cur_v]:
                if rooms[next_v] == False:
                    queue.append(next_v)
                    visited[next_v] = True
    bfs(0)

    return all(visited)
    

def canVisitAllRooms(self, rooms):
    """
    :type rooms: List[List[int]]
    :rtype: bool
    """
    visit = [False] * len(rooms)

    def dfs(graph, cur_v, visit):
        visit[cur_v] = True
        for v in graph[cur_v]:
            if not visit[v]:
                dfs(rooms, v, visit)
    dfs(rooms, 0, visit)
    if False in visit:
        return False
    return True



rooms = [[1,3],[2,4],[0],[4],[],[3,4]]
print(canVisitAllRooms(rooms))