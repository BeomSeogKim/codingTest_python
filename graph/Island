# Number of Islands
# grid는 "1"(land) 과 "0"(water) 으로 이루어진 지도를 표현하는 m x n 이차원 배열이다. 이 지도에 표시된 섬들의 총 갯수를 반환하시오.
# 섬이란 수평과 수직으로 땅이 연결되어 있고 주변은 물로 둘러쌓여있는 것을 말한다. 
# 또한, grid의 네개의 가장자리는 모두 물로 둘러쌓여있다고 가정하고 문제를 해결하라
from collections import deque
def island_calculator(grid):
    row = len(grid)
    col = len(grid[0])
    num_of_visit = 0
    
    visit_list = [[False] * col for _ in range(row)]
    
    def bfs(x,y):
        # 방문 처리 
        visit_list[x][y] = True

        # dx, dy list 구현 위, 아래, 왼쪽, 오른쪽
        dx = [0,0,-1,1]
        dy = [1,-1,0,0]
        queue = deque()
        queue.append((x,y))
        while queue:
            cur_x, cur_y = queue.popleft()
            for i in range(4):
                next_x = cur_x + dx[i]
                next_y = cur_y + dy[i]
                # out of range 잡기 
                if next_x >= 0 and next_x < row and next_y >= 0 and next_y < col:
                    # 육지 이면서 안 간 곳일 경우 
                    if grid[next_x][next_y] == "1" and not visit_list[next_x][next_y]:
                        visit_list[next_x][next_y] = True
                        queue.append((next_x, next_y))

    # 행, 열을 돌면서 bfs 
    for i in range(row):
        for j in range(col):
            # 육지인데 돌지 않은 경우 실행
            if grid[i][j] == "1" and not visit_list[i][j]:
                bfs(i,j)
                num_of_visit +=1
    return num_of_visit



print(island_calculator(grid=[
    ["1", "1", "0", "0", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "1", "0", "0"],
    ["0", "0", "0", "1", "1"],
]))
